
package lathe;

import java.util.*;

import simplerjogl.*;

public class WorkPiece
{
	protected ArrayList<Double> surface;
	protected double radius, length;
	protected int slices, stacks;
	protected double maxRadius, minRadius;

	public WorkPiece (double radius, double length, int slices, int stacks)
	{
		setRadius (radius);
		setLength (length);
		setSlices (slices);
		setStacks (stacks);
		surface = new ArrayList<Double> ();
		for (int s = 0; s < stacks; s++ )
		{
			surface.add (radius);
		}
	}

	/**
	 * @param v
	 *            is a vertex in coordinates relative to the work piece's
	 *            zero point
	 * @return true if v is within the work piece, false otherwise
	 */
	public boolean isContained (Vertex v)
	{
		return v.getY () < getRadius (v.getX ());
	}

	/**
	 * @return distance spanned by a single stack
	 */
	public double getStackHeight ()
	{
		return length / stacks;
	}

	/**
	 * @return arc spanned by a single slice (in radians)
	 */
	public double getSliceArc ()
	{
		return Math.toRadians (360.0 / slices);
	}

	/**
	 * @param distance
	 *            from the zero point of the work piece
	 * @return radius if distance is within work piece, -1 otherwise
	 */
	public double getRadius (double distance)
	{
		if (distance <= length)
		{
			int xUnit = (int) Math.floor (distance / getStackHeight ());
			Vertex l, r;
			l = new Vertex (xUnit * getStackHeight (), surface.get (xUnit));
			r = new Vertex ( (xUnit + 1) * getStackHeight (), surface.get (xUnit + 1));
			double m = (l.getY () - r.getY ()) / (l.getX () - r.getX ());
			double b = l.getY () - (m * l.getX ());
			return m * distance + b;
		}
		else
		{
			return -1;
		}
	}

	protected double setRadius (double r)
	{
		double old = radius;
		radius = Math.abs (r);
		maxRadius = radius;
		minRadius = radius;
		return old;
	}

	protected double setLength (double l)
	{
		double old = length;
		length = Math.abs (l);
		return old;
	}

	protected int setSlices (int s)
	{
		int old = slices;
		slices = Math.abs (s);
		return old;
	}

	protected int setStacks (int s)
	{
		int old = stacks;
		stacks = Math.abs (s);
		return old;
	}

	public double getLength ()
	{
		return length;
	}

	public double getMaxRadius ()
	{
		return maxRadius;
	}
	
	public double getMinRadious ()
	{
		return minRadius;
	}
}